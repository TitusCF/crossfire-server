Last update: June 11th 2001

GENERAL WARNING
---------------

Scriptfire is:
- Still very beta; although the best is made to avoid bugs, some strange things could sometimes happen.
  Never forget this when using Scriptfire.
- Still growing: some new functions will be added while others could be deprecated. Note that most functions
  may be considered stable so this should not be considered as a big problem now.

Scriptfire is not:
- Part of the "official" crossfire distribution.
- finished. Most scripting functions implemented are 'low-level' functions like (get-last-sp).
- A 'closed' project. Feel free to send your comments and suggestions to yann.chachkoff@mailandnews.com

WHAT IS SCRIPTFIRE ?
--------------------

Scriptfire is an implementation of the Scheme/Guile interpreter under Crossfire.
It implements an event-driven model for scripts execution and many specific functions to allow interactions
with the Crossfire universe. The final aim of this project is to provide a sophisticated mechanism needed
to create very complex quests easily.
At this time, only some functions and events (see lists below) are implemented. However, as far as I know,
all supported functions are fully functional, and thus may be used without restrictions.
Since b8 revision, there is a simple error handler included, preventing the server to die
when a script error is encountered. Don't forget, however, that a script terminating abruptly can leave the
objects in a strange state.

HOW TO USE IT ?
---------------

The language used is Scheme/Guile. All functions related to Crossfire are documented below and follow the
classical Scheme syntax. All Guile predefined vars and functions may be used freely.

A test tower has been implemented in the City of Scorn. Looking at the simple scripts provided may be a good
point to start learning using Scriptfire extensions.

You can implement your own scripts in two different ways: embedded or as separate files.

 1 - Embedded Scripts
 --------------------
   The script code is inside your object. You do not need any supplementary files. The main disadvantage is
  that embedded scripts are loaded into memory with your objects (like the messages), so crossfire uses a
  little more memory. Embedded Scripts can be up to 4096 characters long.
   To add an embedded script:
   1) Open your map, and find the object you want to give a script to.
   2) Inside the object, add a 'start_script_... end_script_...' statement (see below for valid statements
      and meanings).
   3) Write your script inside the start_script_... end_script_... statement.
   4) Save your map, (re)start your crossfire server, and try it !
   Example: We want to make an old sage say "Hello World" with a script. In the map, the sage looks like:

      arch sage
      x 1
      y 1
      end

   We then transform it to:

      arch sage
      x 1
      y 1
      start_script_say
        (crossfire-say (who-am-I) "Hello World")
      end_script_say
      msg
      endmsg
      end

   (The empty msg/endmsg structure is needed to prevent the default message to appear).
   That's all that is needed to make the good old sage speak (of course, it is easier to use msg/endmsg
   in this case, but it's just a simple example).

 2 - Script Files
 ----------------
   The script code is this time put inside a separate file. Crossfire does not define any size limit on them;
  they are only loaded when they're executed; they can be edited even when Crossfire is running. They are the
  best choice when you need large scripts or when you are creating new ones (because you don't need to restart
  crossfire each time you modified something).
   To add a script as a separate file:
   1) Write your script using any text editor and save it somewhere under your Crossfire map directory.
   2) Add an event handler inside the object on your map using a text editor or Crossedit.

   Suppose for example that you want to create a Sage saying "Hello World" using a script. First, create a
  script file named crossfire/maps/scripts/sage01.scm . Put the following code inside:

      (crossfire-say (who-am-I) "Hello World !");

   Then create a map as usual and place a sage on it. Save this map under crossfire/maps/scripts/sagemap.
   Edit the sagemap file with a text editor like Emacs of KWrite. Find the following lines:

        arch sage
        x 1
        y 1
        end

   (the position may of course be different - The sage was in this example put on the (1,1) square of the map).
   Then transform it to:

        arch sage
        script_say /scripts/sage01.scm
        msg
        endmsg
        x 1
        y 1
        end

   The empty msg/endmsg structure is needed to erase the default sage message ("I'm too busy to help you").
   Then save the map and test it ! Try to say something to the sage. If anything is ok, it will answer by a
   "Hello World".

SPECIAL SCRIPTS
---------------

$MAP/scripts/autoexec.scm
        The autoexec.scm script is called when the Guile Interpreter is initialized.
        Currently, autoexec.scm execution is deactivated for debugging purposes.

SUPPORTED SCRIPT EVENTS
-----------------------
Please note that many of these events can only be triggered by players at this time.

  1 - Event Handlers for separate script files.
  ---------------------------------------------
   They all follow the format <handler> <filename>.
   Example: script_say /city/scripts/test01.scm

   script_apply
        Called whenever the object is applied/unapplied.
        If you want to know if the object has been applied or unapplied, you must test (applied? (who-am-I)).
   script_death
        Called when the object is destroyed (killed).
        Define the return value of the script to 1 if you want to cancel the death.
        Define it to 0 if you want it to be killed (default behavior).
   script_attack
        Called whenever the object is being attacked if the object is a monster.
        Called whenever the object attacks something if the object is a weapon.
   script_say
        Called whenever the object "hears" something (in fact, whenever the msg...endmsg is triggered).
   script_time
        Called whenever the object gets a chance to move.
   script_drop
        Called whenever the object is dropped on the floor from a player's inventory.
   script_throw
        Called whenever the object is thrown.
   script_trigger
        For books: called whenever you try to write into the book.
        For traps, buttons, altars, pedestals, inventory checkers, runes: called whenever one of
        those is activated. Note that the trap mechanism DOES NOT resolve for those (the action of
        the script replaces it).
        For exits: called whenever activated (it means each time you use it).

  2 - Event Handlers for embedded scripts.
  ----------------------------------------
   They all follow the format:
   <start_handler>
   <script content>
   <end_handler>
   Example:
     start_script_say
       (crossfire-message (who-am-I) "Hello")
     end_script_say
   An embedded script can be up to 4096 characters long.

   start_script_apply/end_script_apply
   start_script_attack/end_script_attack
   start_script_death/end_script_death
   start_script_say/end_script_say
   start_script_time/end_script_time
   start_script_drop/end_script_drop
   start_script_throw/end_script_throw
   start_script_trigger/end_script_trigger

If you browse the source code, you'll see that other events seem to exist. If they are not listed here, it is
because 1) they are not yet fully implemented or 2) they were considered still too buggy to be added to the
list.

SUPPORTED SCRIPT FUNCTIONS
--------------------------

The following list contains all specific Crossfire Scheme functions.
Note that all standard Guile/Scheme functions are still supported under Crossfire-Script.
For a complete list of standard functions, see the Guile Reference Manual.
There are currently (491) Crossfire-specific commands and functions.

A
(acquire-spell who what)
        Makes the object who know spell what.
        Note this is different from learning a spell, since there is no chance the character fails to learn
        the spell.
        Return value: none.
(activate-rune who what)
        Makes object who trigger rune what.
        Return value: none.
(alive? who)
        Tests if the object who is alive.
        Return value: boolean.
(applied? who)
        Tests if the object who is currently applied.
        Return value: boolean.
(apply who whatname flags)
        Apply/unapply object identified by its name to object who.
        Flags are command extensions.
        This is a simple wrapper for the player command 'apply', but
        this one can also be used by monsters.
        Return value: none.
(attack-type-...)
        Returns a long value identifying a particular type of Crossfire attack type.
        These are "wrappers" for various #define directives found in attack.h.
        They are used in functions such as (get-attack-type) or (set-attack-type).

B
(been-applied? who)
        Tests if the object who has already been applied once.
        Return value: boolean.
(blind? who)
        Tests if the object who is blind.
        Return value: boolean.
(blocksview? who)
        Tests if the object who can block the line-of-sight of other monsters/players.
        Return value: boolean.

C
(can-be-picked? who)
        Tests if the object who can be picked from the floor.
        Return value: boolean.
(can-cast-spell? who)
        Tests if the object who is able to cast spells.
        Return value: boolean.
(can-pass-thru? who)
        Tests if the object who can pass thru certain other objects.
        Return value: boolean.
(can-pick-up? who)
        Tests if the object who can pick up other objects.
        Return value: boolean.
(can-roll? who)
        Tests if the object who can be rolled (like boulders).
        Return value: boolean.
(can-see-in-dark? who)
        Tests if the object who can see in the dark.
        Return value: boolean.
(can-see-invisible? who)
        Tests if the object who can see invisible things.
        Return value: boolean.
(can-use-armour? who)
        Tests if the object who can wear an armour.
        The term "armour" includes helmet, gloves, bracers, etc.
        Return value: boolean.
(can-use-bow? who)
        Tests if the object who can use a bow.
        Return value: boolean.
(can-use-horn? who)
        Tests if the object who can use a horn.
        Return value: boolean.
(can-use-ring? who)
        Tests if the object who can use rings.
        Return value: boolean.
(can-use-rod? who)
        Tests if the object who can use a rod.
        Return value: boolean.
(can-use-scroll? who)
        Tests if the object who can read scrolls.
        Return value: boolean.
(can-use-skill? who)
        Tests if the object who can have skills.
        Return value: boolean.
(can-use-wand? who)
        Tests if the object who can use a wand.
        Return value: boolean.
(can-use-weapon? who)
        Tests if the object who can use a weapon.
        Return value: boolean.
(cast-ability who what dir op)
        Makes the object who cast ability what in direction dir with the optional string op.
        The optional string is used for spells like marking rune.
        Return value: none.
(cast-spell who what dir op)
        Makes the object who cast spell what in direction dir with the optional string op.
        The optional string is used for spells like marking rune.
        Note that the object who can be unable to cast the spell because he's no magic abilities, he lacks SP
        or he bungles the spell.
        Return value: none.
(check-inventory who what)
        Checks for the presence of a given object (what) in the inventory of another object (who).
        who is an object, what is the internal name of the archetype to be checked.
        Return value: The object (if found) or zero (if not found).
(check-invisible-object-inside idname where)
        Checks for the presence of an invisible object ('force' archetype) with a slaying field = idname
        inside the object where. You can use invisible object to save scripts variables between calls.
        Return value: The object or 0 (if the object was not found).
(check-map what map x y)
        Checks for the presence of a given archetype on a given map square.
        what is the internal name of the archetype to search for.
        map is the name of the map where the archetype presence is checked.
        x y is the map square that must be checked.
        Return value: The object (if found) or zero (if not found).
(check-trap who what)
        Makes object who try to trigger the trap what. This works for buttons, pedestals and altars.
        Note that if a script has been associated with the checked trap, that script will not get run.
        Return value: none.
(confused? who)
        Tests if the object is confused.
        Return value: boolean.
(create-invisible-object-inside name where)
        Creates a new invisible object (the archetype name is "force" - the same created by "mark"
        archetypes) inside the object where.
        name is an identifier saved in the "slaying" field of the invisible object.
        You can use such objects to save script variables between script calls. It explains why there are
        no function to directly save variables into memory or in a file on the disk.
        Return value: The object or a 0 (if the object can't be created).
(create-object what x y)
        Creates a new object on the current map.
        what may be the internal name of the object to be created (archname) or the name that actually
        appear in the game (like 'ring of Ice' or 'writing pen').
        x y is the position on the map where the object must be created.
        Return value: The object or a 0 (if the object can't be created).
(create-object-inside what where)
        Creates a new object inside another object.
        what is the internal name of the object to be created (archname) or the name that actually appear
        in the game.
        where is the "container" object.
        Return value: The object or a 0 (if the object can't be created).
(crossfire-message message [color])
        Displays an information message on the Crossfire Log Window.
        Color specifies the color in which the message is displayed. You can use the predefined (color-...)
        for that. Default color is (color-light-blue).
        Return value: nothing.
(crossfire-say who message)
        Displays a message of the type ("The ... says:") in the Crossfire Log Window.
        who is the speaker.
        message is the message displayed.
        Return value: nothing.
(crossfire-write who message [color])
        Displays a message on the Crossfire Log Window.
        who is the speaker.
        message is the message displayed.
        color specifies the color of the message. You can use predefined (color-...) functions.
        Any player on the same map as who will ear the message.
        Return value: nothing.
(cursed? who)
        Tests if the object who is cursed.
        Return value: boolean.

D
(damned? who)
        Tests if the object who is damned.
        Return value: boolean.
(direction-east)
        Returns an integer representing the east direction.
(direction-north)
        Returns an integer representing the north direction.
(direction-north-east)
        Returns an integer representing the north-east direction.
(direction-north-west)
        Returns an integer representing the north-west direction.
(direction-south)
        Returns an integer representing the south direction.
(direction-south-east)
        Returns an integer representing the south-east direction.
(direction-south-west)
        Returns an integer representing the south-west direction.
(direction-west)
        Returns an integer representing the west direction.
(drop who whatname)
        Execute a 'drop' command on an object identified by its name
        for object who. This is a simple wrapper for the player 'drop'
        command, altough this one also works for monsters.
        Return value: none.

E
F
(find-player name)
        Finds a player given his name.
        Return value: object identifying the player if found;
                0 if the player couldn't be found.
(fix-object who)
        Update object who. This is a wrapper of internal fix_player function.
        Use it only when you think it is necessary.
        It is planned that (fix-object) would become deprecated, but it
        is still of some use now.
(floor? who)
        Tests if the object who is a floor.
        Return value: boolean.
(flying? who)
        Tests if the object who is flying.
        Return value: boolean.
(forget-spell who what)
        Makes the object who to "forget" the spell what.
        Return value: none.
(friendly? who)
        Tests if the object who is friendly.
        Return value: boolean.

G
(generator? who)
        Tests if the object who is a generator.
        Return value: boolean.
(get-ac who)
        Returns the AC value of object who.
(get-attack-type who)
        Returns the attack types of object who as an integer which
        is the sum of all attack type codes of the object.
        These codes can be obtained by (attack-type-...) functions.
        Return value: Integer (sum of attack types)
(get-cha who)
        Returns the Charisma value of object who.
(get-con who)
        Returns the Constituton value of object who.
(get-damage who)
        Gets the damage value for object who.
        Return value: integer = damage value.
(get-dex who)
        Returns the Dexterity value of object who.
(get-direction who)
        Returns an integer identifying what direction object who currently
        follows.
(get-experience who)
        Returns the experience of object who.
(get-first-object-on-square map, x, y)
        Returns the first object located on map 'map' at square (x,y).
        To browse all object on that square, use (get-first-object-on-square)
        in conjunction with (get-next-object)/(get-previous-object).
(get-god who)
        Returns a string containing the name of the god followed by object who.
(get-grace who)
        Returns the grace value of object who.
(get-hp who)
        Returns the HitPoints value of object who.
(get-int who)
        Returns the Intelligence value of object who.
(get-last-grace who)
        Returns the 'last-grace' amount of object who.
        The 'last-grace' meaning depends on the object type.
(get-last-sp who)
        Returns the 'last-sp' amount of object who.
        The 'last-sp' meaning depends on the object type.
(get-map who)
        Returns the map where who is located.
(get-map-object where)
        Returns the object associated with map specified by where.
(get-map-path where)
        Returns the filename/path of map specified by where.
(get-max-hp  who)
        Returns the maximum value of HitPoints of object who.
(get-max-sp who)
        Returns the maximum value of SpellPoints of object who.
(get-message who)
        Returns a string containing the message (msg...endmsg) content of
        object who.
(get-name who)
        Returns the name of object who.
        The name returned is the name displayed, not the "internal name".
(get-next-object who)
        Returns the object 'below' object who, or 0 if no object was found.
(get-pow who)
        Returns the Power value of object who.
(get-previous-object who)
        Returns the object 'above' object who, or 0 if no object was found.
(get-quantity who)
        Returns the quantity of object who.
        Return value: Integer representing that quantity.
(get-remaining-scriptfire-quantum)
        This keyword is reserved for future use.
(get-return-value)
        This keyword is deprecated - It will be removed soon.
(get-script-apply who)
        Returns the apply script of object who.
(get-script-attack who)
        Returns the attack script of object who.
(get-script-death who)
        Returns the death script of object who.
(get-script-drop who)
        Returns the drop script of object who.
(get-script-load who)
        Returns the load script of object who.
(get-script-say who)
        Returns the say script of object who.
(get-script-stop who)
        Returns the stop script of object who.
(get-script-throw who)
        Returns the throw script of object who.
(get-script-time who)
        Returns the time script of object who.
(get-script-trigger who)
        Returns the trigger script of object who.
(get-scriptfire-quantum)
        This keyword is reserved for future use.
(get-sp who)
        Returns the SpellPoints value of object who.
(get-speed who)
        Returns the speed of object who.
(get-str who)
        Returns the Strength value of object who.
(get-type who)
        Returns the Type of object who.
        The Type-value returned is compatible with the (type-...) functions.
(get-wis who)
        Returns the Wisdom value of object who.
(get-x-position who)
        Returns the x position of object who.
(get-y-position who)
        Returns the y position of object who.

H
(has-xrays? who)
        Tests if the object who has x-rays vision.
        Return value: boolean.
(hitback? who)
        Tests if the object who has Hitback touch.
        Return value: boolean.

I
(identified? who)
        Tests if the object who is already identified.
        Return value: boolean.
(insert-object-inside what where)
        Inserts object what inside object where.
        Return value: none.
(invisible? who)
        Tests if object who is invisible.
        Return value: boolean.
(is-type? who type)
        Tests if object who is of Type type.
        Return value: boolean.

J
K
(kill-object killer killed atype)
        Kills object killed with attack of type atype.
        Killer is the object that receives experience points.
        (identified as the object killer).
        Return value: none.
(know-spell? who what)
        Tests if object who knows the spell what.
        Return value: boolean.
(known-cursed? who)
        Tests if object who is known as a cursed object.
        Return value: boolean.
(known-magical? who)
        Tests if object who is known as a magical object.
        Return value: boolean.

L
(lifesaver? who)
        Tests if object who is a LifeSaver object.
        Return value: boolean.

M
(make-invisible? who)
        Tests if object who can provide invisibility.
        Return value: boolean.
(monster? who)
        Tests if object who is a monster.
        Return value: boolean.

N
O
(only-attack? who)
        Tests the ONLY_ATTACK flag for object who.
        Return value: boolean.

P
Q
R
(ready-map mapname)
        Returns a reference to a map given its file name (mapname).
        The map will be (re)loaded if necessary.
        Return value: Desired map or 0 if not found.
(reflect-missiles? who)
        Tests if object who can reflect missiles.
        Return value: boolean.
(reflect-spells? who)
        Tests if object who can reflect spells.
        Return value: boolean.
(remove-object what)
        Destroys the object what.
        Return value: none.
(run-away? who)
        Tests if object who is running away.
        Return value: boolean.

S
(scared? who)
        Tests the SCARED flag for object who.
        Return value: boolean.
(set-ac who value)
        Sets the AC value of object who to value.
        Return value: none.
(set-attack-type who value)
        Sets the attack type of object who to value.
        Value is the sum of all desired attack type codes.
        These can be obtained by the (attack-type-...) functions.
        Return value: none.
(set-been-applied who value)
        Sets the been_applied flag to value.
        Return value: none.
(set-cha who value)
        Sets the Charisma value of object who to value.
        Return value: none.
(set-con who value)
        Sets the Constitution value of object who to value.
        Return value: none.
(set-damage who value)
        Sets the damage value for object who to value.
        Return value: none.
(set-dex who value)
        Sets the Dexterity value of object who to value.
        Return value: none.
(set-direction who value)
        Sets the direction of object who to value.
        Use the (direction-...) vars as value parameters.
        Return value: none.
(set-experience who value)
        Sets the experience total of object who to value.
        Return value: none.
(set-god who value)
        Sets the god for object who to value. Value is a string
        containing the name of the god. Does nothing on objects
        that do not have the "praying" skill for now.
        Return value: none.
(set-grace who value)
        Sets the Grace value of object who to value.
        Return value: none.
(set-hp who value)
        Sets the HitPoints value of object who to value.
        Return value: none.
(set-identified who value)
        Sets the identified flag to value.
        Return value: none.
(set-int who value)
        Sets the Intelligence value of object who to value.
        Return value: none.
(set-invisible who value)
        Sets the invisible status of object who to value.
        Return value: none.
(set-last-sp who value)
        Sets the 'last-sp' parameter of object who to value.
        The meaning of last-sp varies from one object type to another.
        Return value: none.
(set-last-grace who value)
        Sets the 'last-grace' parameter of object who to value.
        The meaning of last-grace varies from one object type to another.
        Return value: none.
(set-max-hp who value)
        Sets the maximum HitPoints value of object who to value.
        Return value: none.
(set-max-sp who value)
        Sets the maximum SpellPoints value of object who to value.
        Return value: none.
(set-position who x y)
        Sets the position of object who to (x,y).
        Return value: none.
(set-pow who value)
        Sets the Power value of object who to value.
        Return value: none.
(set-quantity who value)
        Sets the quantity of object who to value.
        Return value: none.
(set-return-value value)
        This keyword is deprecated and will soon be removed.
(set-script-apply who value)
        Sets the apply script of object who to value.
        Return value: none.
(set-script-attack who value)
        Sets the attack script of object who to value.
        Return value: none.
(set-script-death who value)
        Sets the death script of object who to value.
        Return value: none.
(set-script-drop who value)
        Sets the drop script of object who to value.
        Return value: none.
(set-script-load who value)
        Sets the load script of object who to value.
        Return value: none.
(set-script-say who value)
        Sets the say script of object who to value.
        Return value: none.
(set-script-stop who value)
        Sets the stop script of object who to value.
        Return value: none.
(set-script-time who value)
        Sets the time script of object who to value.
        Return value: none.
(set-script-trigger who value)
        Sets the trigger script of object who to value.
        Return value: none.
(set-script-throw who value)
        Sets the throw script of object who to value.
        Return value: none.
(set-sp who value)
        Sets the SpellPoints value of object who to value.
        Return value: none.
(set-speed who value)
        Sets the speed of object who to value.
        Return value: none.
(set-str who value)
        Sets the Strength value of object who to value.
        Return value: none.
(set-weight who value)
        Setes the Weight value of object who to value.
        Return value: none.
(set-wis who value)
        Sets the Wisdom value of object who to value.
        Return value: none.
(set-title who what)
        Sets the Title of object who to title.
        Return value: none.
(set-unaggressive who state)
        Sets the Unaggressive status of object who to state.
        state is a boolean.
        Return value: none.
(sleeping? who)
        Tests if object who is sleeping.
        Return value: boolean.
(splitting? who)
        Tests if object who is splitting.
        Return value: boolean.
(stand-still? who)
        Tests the flag STAND_STILL of object who.
        Return value: boolean.
(stealth? who)
        Tests if the object who has stealth.
        Return value: boolean.

T
(take who whatname)
        Executes a 'take' command for an object identified by its name
        for object who. This is a simple wrapper for the player 'take'
        command, but this one works for monsters too.
        Return value: none.
(teleport who where x y)
        Teleport an object who into map where at location x;y. If it is not a free
        square, the nearest is chosen instead.
        Return value: none.
(thrown? who)
        Tests if the object who can be thrown.
        Return value: boolean.
(turnable? who)
        Tests the flag TURNABLE of object who.
        Return value: boolean.
(type-...)
        Returns a long value identifying a particular type of Crossfire object.
        These are "wrappers" for various #define directives found in define.h.
        They are used to test the type of an object ((is-type?) or (get-type)).

U
(unaggressive? who)
        Tests if the object who is unaggressive.
        Return value: boolean.
(undead? who)
        Tests if the object who is an undead.
        Return value: boolean.
(unique? who)
        Tests if the object who is unique.
        Return value: boolean.
(unpaid? who)
        Tests if the object who is still unpaid.
        Return value: boolean.
(used-up? who)
        Tests if the object who is used up.
        Return value: boolean.

V
W
(was-wiz? who)
        Tests if the object who was once a Dungeon Master.
        Return value: boolean.
(what-message)
        When called from a script_say event, returns the message who triggered the event.
        If called from any other event, returns an empty string.
(who-am-I)
        Returns the object calling the script.
(who-is-activator)
        Returns the object who triggered the event.
(who-is-other)
        In a script_attack event for weapons, returns what object is being attacked.
        In any other case, returns 0;
(wiz? who)
        Tests if the object who is a Dungeon Master.
        Return value: boolean.

X
Y
Z

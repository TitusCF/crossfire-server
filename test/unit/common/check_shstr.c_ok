/*
 * static char *rcsid_check_shstr_c =
 *   "$Id$";
 */

/*
    CrossFire, A Multiplayer game for X-windows

    Copyright (C) 2002 Mark Wedel & Crossfire Development Team
    Copyright (C) 1992 Frank Tore Johansen

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

    The authors can be reached via e-mail at crossfire-devel@real-time.com
*/

/* 
 * This is the unit tests file for common/shstr.c
 */

#include <stdlib.h>
#include <check.h>

extern const char * add_string(const char *str);

void setup(void) { 
    init_hash_table();
}

void teardown(void)
{
    /* nothing to do */
}

START_TEST (test_add_string)
{
    char * str1;
    char * str2;
    char * str3;
    char * temp;
    fail_unless (add_string(NULL) == NULL, "add_string should null when receiving a null as parameter.");
    str1 = add_string("Hello world");
    fail_unless (str1 != NULL, "add_string should not return null when receiving content.");
    temp = malloc (strlen(str1)+1);
    strcpy(temp, str1);
    str2 = add_string(temp);
    fail_unless (str2 == str1,
                 "add_string should return same pointer for 2 same strings "
                         "but str1 (%p -> '%s') != str2 (%p -> '%s').",
                 str1,str1,str2,str2);
    str3 = add_string("");
    fail_unless(str3 !=NULL, "add_string should handle gracefully empty non null strings.");
}
END_TEST

Suite *shstr_suite(void)
{
  Suite *s = suite_create("shstr");
  TCase *tc_core = tcase_create("Core");
    /*setup and teardown will be called before each test in testcase 'tc_core' */
  tcase_add_checked_fixture(tc_core,setup,teardown); 

  suite_add_tcase (s, tc_core);
  tcase_add_test(tc_core, test_add_string);

  return s;
}

int main(void)
{
  int nf;
  Suite *s = shstr_suite();
  SRunner *sr = srunner_create(s);
  srunner_run_all(sr, CK_NORMAL);
  nf = srunner_ntests_failed(sr);
  srunner_free(sr);
  return (nf == 0) ? EXIT_SUCCESS : EXIT_FAILURE;
}
